////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(x, y, z=1) {
  let output = []
  if (z < 0) {
    return []
  }
if (x === y) {
  return []
} else {
  for (let i = x; i <= y; i = i + z) {
output.push(i)
  }
}
return output
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let finalSum = 0
for (let i = 0; i < array.length; i++) {
  finalSum += array[i]
}
return finalSum
}



////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
let output = []
for (let i = array.length - 1; i >= 0; i--){
  output.push(array[i])
}
return output
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
for (let i = 0; i < array.length / 2; i++) {
  // declare temp variable to hold onto value of array item before swap
  let temp = array[i];
  // assign current iteration to its corresponding last element, so on 1st iteration array[0] gets set to last element in the array
  array[i] = array[array.length - 1 - i]
  /*assign last element with the value that is being held by temp variable, cannot assign value 
  with array[i] because array[i]'s value has already been swappped with it's corresponding last value.
  meaning if we did array[array.length - 1 - i] = array[i] we'd set the corresponding last value 
  to itself.
  */
  array[array.length - 1 - i] = temp
}
// return mutated array
return array
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  // set list = null to begin with
let rest = null
  // loop backward because we know we want the value of the last item to equal null
for (let i = array.length - 1; i >= 0; i--) {
  // each iteration we're updating list properties with the current element of the array
  rest = {
    value: array[i],
    rest: rest
  }
}
return rest
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array=[]) {
// base case
if (list.rest === null) {
array.push(list.value);
return array;
}
// recursion
array.push(list.value)
return listToArray(list.rest, array)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(num, list) {
updatedList = { value: num, rest: list}
return updatedList
}


////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, indexVal) {
let listArr = listToArray(list);
return listArr[indexVal]
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
// determine if x and y ARE NOT objects
if (typeof x !== 'object' && typeof y !== 'object'){
  return x === y;
}
// determine if x OR y is not an object
if (typeof x !== 'object' || typeof y !== 'object'){
  return false;
}
// create arrays of each inputs keys
let xKeys = Object.keys(x); // ['a']
let yKeys = Object.keys(y); // ['a']

if (xKeys.length !== yKeys.length){
  return false;
}
// iterate to determine if array keys matchc and valuess at keys match
for (let i = 0; i < xKeys.length; i++) {
  if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[yKeys[i]])) {
    return false
  }
}
return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};